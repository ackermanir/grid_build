{"ast":null,"code":"import React from'react';import'./GameBoard.css';import{jsxs as _jsxs,jsx as _jsx}from\"react/jsx-runtime\";export const GameBoard=_ref=>{let{grid,selectedCard,onTileClick,missileDomeSelection=null,pendingAttacks}=_ref;// Determine if a tile is eligible for card placement\nconst isTileEligible=(tile,rowIndex,colIndex)=>{// In missile dome selection mode\nif(missileDomeSelection){// Check if this tile is already selected\nconst isAlreadySelected=missileDomeSelection.tilesSelected.some(_ref2=>{let[r,c]=_ref2;return r===rowIndex&&c===colIndex;});if(isAlreadySelected){return false;}// In missile dome mode, any unselected tile is eligible\nreturn true;}// Normal mode - check if tile doesn't have a card and player has selected a card\nreturn!tile.cardPlayed&&selectedCard!==null;};return/*#__PURE__*/_jsxs(\"div\",{className:\"game-board\",children:[grid.map((row,rowIndex)=>/*#__PURE__*/_jsx(\"div\",{className:\"board-row\",children:row.map((tile,colIndex)=>{var _tile$defenseHistory;const isEligible=isTileEligible(tile,rowIndex,colIndex);const landClass=`land-${tile.landType}`;// Check if this tile is selected in missile dome mode\nconst isSelectedForMissileDome=missileDomeSelection===null||missileDomeSelection===void 0?void 0:missileDomeSelection.tilesSelected.some(_ref3=>{let[r,c]=_ref3;return r===rowIndex&&c===colIndex;});// Check if this tile has a pending attack\nconst hasPendingAttack=pendingAttacks===null||pendingAttacks===void 0?void 0:pendingAttacks.positions.some(_ref4=>{let[r,c]=_ref4;return r===rowIndex&&c===colIndex;});return/*#__PURE__*/_jsxs(\"div\",{className:`board-tile ${landClass} ${isEligible?'eligible':''} ${isSelectedForMissileDome?'missile-dome-selected':''} ${hasPendingAttack?'pending-attack':''}`,onClick:()=>(isEligible||isSelectedForMissileDome)&&onTileClick(rowIndex,colIndex),children:[/*#__PURE__*/_jsxs(\"div\",{className:\"land-type\",children:[tile.landType==='gold'&&'üí∞',tile.landType==='card'&&'üÉè',tile.landType==='play'&&'‚ñ∂Ô∏è']}),tile.cardPlayed&&/*#__PURE__*/_jsx(\"div\",{className:\"played-card\",children:/*#__PURE__*/_jsx(\"span\",{className:\"card-emoji\",children:tile.cardPlayed.emoji})}),(tile.defense>0||tile.defenseHistory&&tile.defenseHistory.length>0)&&/*#__PURE__*/_jsxs(\"div\",{className:\"defense-value\",children:[tile.defense+(((_tile$defenseHistory=tile.defenseHistory)===null||_tile$defenseHistory===void 0?void 0:_tile$defenseHistory.reduce((sum,item)=>sum+item.defense,0))||0),\"\\uD83D\\uDEE1\\uFE0F\"]}),tile.defenseHistory&&tile.defenseHistory.length>0&&/*#__PURE__*/_jsx(\"div\",{className:\"persistent-defense\",children:\"\\u23F3\"}),tile.damage>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"damage-value\",children:[tile.damage,\"\\uD83D\\uDCA5\"]}),hasPendingAttack&&/*#__PURE__*/_jsxs(\"div\",{className:\"pending-attack-value\",children:[pendingAttacks===null||pendingAttacks===void 0?void 0:pendingAttacks.damagePerAttack,\"\\u26A0\\uFE0F\"]}),isSelectedForMissileDome&&/*#__PURE__*/_jsx(\"div\",{className:\"missile-dome-indicator\",children:\"\\uD83C\\uDFAF\"})]},`tile-${rowIndex}-${colIndex}`);})},`row-${rowIndex}`)),missileDomeSelection&&/*#__PURE__*/_jsxs(\"div\",{className:\"missile-dome-instructions\",children:[\"Select \",missileDomeSelection.tilesNeeded-missileDomeSelection.tilesSelected.length,\" more tile(s) to defend\"]})]});};","map":{"version":3,"names":["React","jsxs","_jsxs","jsx","_jsx","GameBoard","_ref","grid","selectedCard","onTileClick","missileDomeSelection","pendingAttacks","isTileEligible","tile","rowIndex","colIndex","isAlreadySelected","tilesSelected","some","_ref2","r","c","cardPlayed","className","children","map","row","_tile$defenseHistory","isEligible","landClass","landType","isSelectedForMissileDome","_ref3","hasPendingAttack","positions","_ref4","onClick","emoji","defense","defenseHistory","length","reduce","sum","item","damage","damagePerAttack","tilesNeeded"],"sources":["/home/acker/projects/grid_build/src/components/GameBoard.tsx"],"sourcesContent":["import React from 'react';\nimport { Tile, Card } from '../types';\nimport './GameBoard.css';\n\ninterface GameBoardProps {\n  grid: Tile[][];\n  selectedCard: Card | null;\n  onTileClick: (rowIndex: number, colIndex: number) => void;\n  missileDomeSelection?: {\n    tilesSelected: [number, number][];\n    tilesNeeded: number;\n  } | null;\n  pendingAttacks?: {\n    positions: [number, number][];\n    damagePerAttack: number;\n  };\n}\n\nexport const GameBoard: React.FC<GameBoardProps> = ({ \n  grid, \n  selectedCard, \n  onTileClick,\n  missileDomeSelection = null,\n  pendingAttacks\n}) => {\n  // Determine if a tile is eligible for card placement\n  const isTileEligible = (tile: Tile, rowIndex: number, colIndex: number): boolean => {\n    // In missile dome selection mode\n    if (missileDomeSelection) {\n      // Check if this tile is already selected\n      const isAlreadySelected = missileDomeSelection.tilesSelected.some(\n        ([r, c]) => r === rowIndex && c === colIndex\n      );\n      \n      if (isAlreadySelected) {\n        return false;\n      }\n      \n      // In missile dome mode, any unselected tile is eligible\n      return true;\n    }\n    \n    // Normal mode - check if tile doesn't have a card and player has selected a card\n    return !tile.cardPlayed && selectedCard !== null;\n  };\n\n  return (\n    <div className=\"game-board\">\n      {grid.map((row, rowIndex) => (\n        <div key={`row-${rowIndex}`} className=\"board-row\">\n          {row.map((tile, colIndex) => {\n            const isEligible = isTileEligible(tile, rowIndex, colIndex);\n            const landClass = `land-${tile.landType}`;\n            \n            // Check if this tile is selected in missile dome mode\n            const isSelectedForMissileDome = missileDomeSelection?.tilesSelected.some(\n              ([r, c]) => r === rowIndex && c === colIndex\n            );\n            \n            // Check if this tile has a pending attack\n            const hasPendingAttack = pendingAttacks?.positions.some(\n              ([r, c]) => r === rowIndex && c === colIndex\n            );\n            \n            return (\n              <div\n                key={`tile-${rowIndex}-${colIndex}`}\n                className={`board-tile ${landClass} ${isEligible ? 'eligible' : ''} ${isSelectedForMissileDome ? 'missile-dome-selected' : ''} ${hasPendingAttack ? 'pending-attack' : ''}`}\n                onClick={() => (isEligible || isSelectedForMissileDome) && onTileClick(rowIndex, colIndex)}\n              >\n                {/* Land type indicator */}\n                <div className=\"land-type\">\n                  {tile.landType === 'gold' && 'üí∞'}\n                  {tile.landType === 'card' && 'üÉè'}\n                  {tile.landType === 'play' && '‚ñ∂Ô∏è'}\n                </div>\n                \n                {/* Card played on this tile */}\n                {tile.cardPlayed && (\n                  <div className=\"played-card\">\n                    <span className=\"card-emoji\">{tile.cardPlayed.emoji}</span>\n                  </div>\n                )}\n                \n                {/* Defense value - include defense from history */}\n                {(tile.defense > 0 || (tile.defenseHistory && tile.defenseHistory.length > 0)) && (\n                  <div className=\"defense-value\">\n                    {tile.defense + (tile.defenseHistory?.reduce((sum, item) => sum + item.defense, 0) || 0)}üõ°Ô∏è\n                  </div>\n                )}\n                \n                {/* Persistent defense indicator */}\n                {tile.defenseHistory && tile.defenseHistory.length > 0 && (\n                  <div className=\"persistent-defense\">\n                    ‚è≥\n                  </div>\n                )}\n                \n                {/* Damage value */}\n                {tile.damage > 0 && (\n                  <div className=\"damage-value\">\n                    {tile.damage}üí•\n                  </div>\n                )}\n                \n                {/* Pending attack indicator */}\n                {hasPendingAttack && (\n                  <div className=\"pending-attack-value\">\n                    {pendingAttacks?.damagePerAttack}‚ö†Ô∏è\n                  </div>\n                )}\n                \n                {/* Missile dome selection indicator */}\n                {isSelectedForMissileDome && (\n                  <div className=\"missile-dome-indicator\">\n                    üéØ\n                  </div>\n                )}\n              </div>\n            );\n          })}\n        </div>\n      ))}\n      \n      {missileDomeSelection && (\n        <div className=\"missile-dome-instructions\">\n          Select {missileDomeSelection.tilesNeeded - missileDomeSelection.tilesSelected.length} more tile(s) to defend\n        </div>\n      )}\n    </div>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}