{"ast":null,"code":"import React from'react';import'./HandArea.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export const HandArea=_ref=>{let{hand,selectedCard,onCardSelect,cardPlays,selectionMode=null,selectedForDiscard=[]}=_ref;// Determine if a card can be played based on selection mode\nconst canPlayCard=card=>{if(selectionMode==='discard'){// In discard mode, all cards are selectable\nreturn true;}// In normal play mode, can only play if player has card plays left\nreturn cardPlays>0;};return/*#__PURE__*/_jsxs(\"div\",{className:\"hand-area\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"hand-title\",children:selectionMode==='discard'?'Select Cards to Discard':`Your Hand (${hand.length})`}),/*#__PURE__*/_jsx(\"div\",{className:\"hand-cards\",children:hand.map(card=>{const isSelected=selectionMode==='discard'?selectedForDiscard.some(c=>c.id===card.id):selectedCard&&selectedCard.id===card.id;const isPlayable=canPlayCard(card);return/*#__PURE__*/_jsxs(\"div\",{className:`hand-card ${isSelected?'selected':''} ${isPlayable?'playable':'unplayable'}`,onClick:()=>isPlayable&&onCardSelect(card),children:[/*#__PURE__*/_jsxs(\"div\",{className:\"card-header\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"card-name\",children:card.name}),/*#__PURE__*/_jsx(\"span\",{className:\"card-cost\",children:card.cost})]}),/*#__PURE__*/_jsx(\"div\",{className:\"card-emoji\",children:card.emoji}),/*#__PURE__*/_jsx(\"div\",{className:\"card-type\",children:card.type}),/*#__PURE__*/_jsx(\"div\",{className:\"card-description\",children:card.description}),/*#__PURE__*/_jsx(\"div\",{className:\"card-effects\",children:Object.entries(card.effects).map(_ref2=>{let[key,value]=_ref2;if(key==='land_benefit'&&value===true){return/*#__PURE__*/_jsx(\"div\",{children:\"Land Benefit\"},key);}if(value&&typeof value!=='object'){return/*#__PURE__*/_jsxs(\"div\",{children:[key,\": \",value]},key);}return null;})}),selectionMode==='discard'&&isSelected&&/*#__PURE__*/_jsx(\"div\",{className:\"discard-marker\",children:\"Discard\"})]},card.id);})}),selectionMode==='discard'&&/*#__PURE__*/_jsxs(\"div\",{className:\"discard-info\",children:[\"Selected \",selectedForDiscard.length,\" cards to discard. Click \\\"Confirm Discards\\\" to draw that many cards.\"]})]});};","map":{"version":3,"names":["React","jsx","_jsx","jsxs","_jsxs","HandArea","_ref","hand","selectedCard","onCardSelect","cardPlays","selectionMode","selectedForDiscard","canPlayCard","card","className","children","length","map","isSelected","some","c","id","isPlayable","onClick","name","cost","emoji","type","description","Object","entries","effects","_ref2","key","value"],"sources":["/home/acker/projects/grid_build/src/components/HandArea.tsx"],"sourcesContent":["import React from 'react';\nimport { Card } from '../types';\nimport './HandArea.css';\n\ninterface HandAreaProps {\n  hand: Card[];\n  selectedCard: Card | null;\n  onCardSelect: (card: Card) => void;\n  cardPlays: number;\n  selectionMode?: 'play' | 'discard' | null;\n  selectedForDiscard?: Card[];\n}\n\nexport const HandArea: React.FC<HandAreaProps> = ({ \n  hand, \n  selectedCard, \n  onCardSelect,\n  cardPlays,\n  selectionMode = null,\n  selectedForDiscard = []\n}) => {\n  // Determine if a card can be played based on selection mode\n  const canPlayCard = (card: Card): boolean => {\n    if (selectionMode === 'discard') {\n      // In discard mode, all cards are selectable\n      return true;\n    }\n    \n    // In normal play mode, can only play if player has card plays left\n    return cardPlays > 0;\n  };\n\n  return (\n    <div className=\"hand-area\">\n      <h2 className=\"hand-title\">\n        {selectionMode === 'discard' \n          ? 'Select Cards to Discard' \n          : `Your Hand (${hand.length})`\n        }\n      </h2>\n      <div className=\"hand-cards\">\n        {hand.map(card => {\n          const isSelected = selectionMode === 'discard'\n            ? selectedForDiscard.some(c => c.id === card.id)\n            : selectedCard && selectedCard.id === card.id;\n            \n          const isPlayable = canPlayCard(card);\n          \n          return (\n            <div\n              key={card.id}\n              className={`hand-card ${isSelected ? 'selected' : ''} ${isPlayable ? 'playable' : 'unplayable'}`}\n              onClick={() => isPlayable && onCardSelect(card)}\n            >\n              <div className=\"card-header\">\n                <span className=\"card-name\">{card.name}</span>\n                <span className=\"card-cost\">{card.cost}</span>\n              </div>\n              <div className=\"card-emoji\">{card.emoji}</div>\n              <div className=\"card-type\">{card.type}</div>\n              <div className=\"card-description\">{card.description}</div>\n              <div className=\"card-effects\">\n                {Object.entries(card.effects).map(([key, value]) => {\n                  if (key === 'land_benefit' && value === true) {\n                    return <div key={key}>Land Benefit</div>;\n                  }\n                  if (value && typeof value !== 'object') {\n                    return (\n                      <div key={key}>\n                        {key}: {value}\n                      </div>\n                    );\n                  }\n                  return null;\n                })}\n              </div>\n              {selectionMode === 'discard' && isSelected && (\n                <div className=\"discard-marker\">Discard</div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n      {selectionMode === 'discard' && (\n        <div className=\"discard-info\">\n          Selected {selectedForDiscard.length} cards to discard.\n          Click \"Confirm Discards\" to draw that many cards.\n        </div>\n      )}\n    </div>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}